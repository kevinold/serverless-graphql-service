# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    v1.docs.serverless.com
#
# Happy Coding!

service: serverless-graphql-service
provider: aws
runtime: nodejs4.3

# you can overwrite defaults here
defaults:
    stage: dev
    region: us-east-1

# you can add packaging information here
#package:
#    include:
#        - include-me.js
#    exclude:
#        - exclude-me.js
#    artifact: my-service-code.zip

functions:
    hello:
        handler: handler.hello
        events:
            - http:
                path: greet
                method: get

#       you can add any of the following events
#       events:
#           - http:
#               path: users/create
#               method: get
#           - s3: ${bucket}
#           - schedule: rate(10 minutes)
#           - sns: greeter-topic

# you can add CloudFormation resource templates here
resources:
    Resources:
      IamRoleLambda: {Type: 'AWS::IAM::Role', Properties: {AssumeRolePolicyDocument: {Version: '2012-10-17', Statement: [{Effect: Allow, Principal: {Service: [lambda.amazonaws.com]}, Action: ['sts:AssumeRole']}]}, Path: /}}
      IamPolicyLambda: {Type: 'AWS::IAM::Policy', Properties: {PolicyName: '${stage}-${service}-lambda', PolicyDocument: {Version: '2012-10-17', Statement: [{Effect: Allow, Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents'], Resource: 'arn:aws:logs:${region}:*:*'}, {Effect: Allow, Action: ['*'], Resource: 'arn:aws:dynamodb:${region}:*:table/${service}-posts-${stage}'}, {Effect: Allow, Action: ['*'], Resource: 'arn:aws:dynamodb:${region}:*:table/${service}-authors-${stage}'}, {Effect: Allow, Action: ['*'], Resource: 'arn:aws:dynamodb:${region}:*:table/${service}-comments-${stage}'}]}, Roles: [{Ref: IamRoleLambda}]}}
      PostsDynamo: {Type: 'AWS::DynamoDB::Table', DeletionPolicy: Retain, Properties: {AttributeDefinitions: [{AttributeName: id, AttributeType: S}], KeySchema: [{AttributeName: id, KeyType: HASH}], ProvisionedThroughput: {ReadCapacityUnits: 1, WriteCapacityUnits: 1}, TableName: '${service}-posts-${stage}'}}
      AuthorsDynamo: {Type: 'AWS::DynamoDB::Table', DeletionPolicy: Retain, Properties: {AttributeDefinitions: [{AttributeName: id, AttributeType: S}], KeySchema: [{AttributeName: id, KeyType: HASH}], ProvisionedThroughput: {ReadCapacityUnits: 1, WriteCapacityUnits: 1}, TableName: '${service}-authors-${stage}'}}
      CommentsDynamo: {Type: 'AWS::DynamoDB::Table', DeletionPolicy: Retain, Properties: {AttributeDefinitions: [{AttributeName: id, AttributeType: S}], KeySchema: [{AttributeName: id, KeyType: HASH}], ProvisionedThroughput: {ReadCapacityUnits: 1, WriteCapacityUnits: 1}, TableName: '${service}-comments-${stage}'}}
    Outputs:
      IamRoleArnLambda: {Description: 'ARN of the lambda IAM role', Value: {'Fn::GetAtt': [IamRoleLambda, Arn]}}

#resources:
#    Resources:
#      newResource:
#        Type: AWS::S3::Bucket
#        Properties:
#          BucketName: newBucket



